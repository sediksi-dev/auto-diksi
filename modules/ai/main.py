from .tasks.create_outline.bot import create_outline_from_article
from .tasks.create_outline.models import CreateOutlineFromArticleArgs, OutlineArticle

from .tasks.create_seo_data.bot import create_seo_data
from .tasks.create_seo_data.models import CreateSEODataArgs

from .tasks.create_intro.bot import create_intro
from .tasks.create_intro.models import CreateIntroArgs

from .tasks.create_section_paragraphs.bot import create_section_paragraphs
from .tasks.create_section_paragraphs.models import CreateSectionParagraphArgs

from .models import ArticleToArticleInput, ArticleToArticleOutput


class AI:
    def __init__(self):
        pass

    def __outline_to_str(self, outline: OutlineArticle) -> str:
        outline_str = ""

        outline_str += "# Intro\n"
        outline_str += f"{outline.intro}\n\n"
        outline_str += "# Sections\n"
        for section in outline.sections:
            outline_str += f"## {section.subheading}\n"
            for info in section.information:
                outline_str += f"- {info}\n"
            outline_str += "\n"

        outline_str += f"\n## Further Insights\n\n{outline.further_insights}\n\n"

        return outline_str

    def __modify_outline(self, outline: OutlineArticle) -> str:
        subheadings = "\n".join(
            [f"- {section.subheading}" for section in outline.sections]
        )
        return subheadings

    def article_to_article(self, args: ArticleToArticleInput):

        # Create outline from article
        outline_args = CreateOutlineFromArticleArgs(
            original_article=args.original_article,
            lang_target=args.lang_target,
            lang_source=args.lang_source,
        )
        outline = create_outline_from_article(outline_args)
        outline_str = self.__outline_to_str(outline)

        # Create SEO data from outline generated by `create_outline` function
        seo_data_args = CreateSEODataArgs(
            outline=outline_str, lang_target=args.lang_target
        )
        seo_data = create_seo_data(seo_data_args)

        # Create intro from SEO data generated by `create_seo_data` function
        intro_args = CreateIntroArgs(
            keyword=seo_data.keyword,
            title=seo_data.seo_title,
            description=seo_data.meta_description,
            lang_target=args.lang_target,
            intro_guideline=outline.intro,
            intent=seo_data.writing_guidelines.intent,
            style=seo_data.writing_guidelines.style,
            tone=seo_data.writing_guidelines.tone,
        )
        intro = create_intro(intro_args)

        # create sections paragraph
        paragraphs = []
        for section in outline.sections:
            section_args = CreateSectionParagraphArgs(
                keyword=seo_data.keyword,
                title=seo_data.seo_title,
                target_audience=seo_data.target_audience,
                intent=seo_data.writing_guidelines.intent,
                style=seo_data.writing_guidelines.style,
                tone=seo_data.writing_guidelines.tone,
                subtopic=section.subheading,
                informations=section.information,
                intro=intro,
                lang_target=args.lang_target,
                outline=self.__modify_outline(outline),
            )
            paragraph = create_section_paragraphs(section_args)
            paragraphs.append(paragraph)

        results = ArticleToArticleOutput(
            outline=outline, seo_data=seo_data, intro=intro, body=paragraphs
        )
        return results
